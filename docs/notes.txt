GAME MODULE PROPERTIES AND FUNCTIONS
================================================

Game State Properties (private):

board
playerPiece
playerTurn -> ???
gameOver
turn

Option Toggle Properties (private):

aiMode     :  0 (off), 1(on), 2(perfect?)

Public Methods:

start()
reset()
update(square)

Private Methods:

determineGameState(move)
makeMove(move)
aiPlayerMove()
getMoveScore(move)


isMoveValid(move)
isWin(currentMove)
isTie(currentMove)

createMoveFromSquare(square)
createMoveFromCoords(row, column, piece = computerPiece)

getBoard()
clearBoard()
getBoardCell(row, column)
setBoardCell(move)

getCurrentPiece()
toggleCurrentPiece()

getTurn()
incrementTurn()

getGameOver()
toggleGameOver()

isPlayerTurn()
togglePlayerTurn()

getAIMode()
setAIMode()


GAME AI ALGORITHIM
================================================

0. click handler or other function gets id of cell being clicked on and translates it to a move object :  {row: y, column: x, piece: 'X'} and then calls ...
1. makeMove(move) :  updates board and display and then tests move for win
2. testMove(move, board)
3. isWin(move, board)
4. aiPlayer() - makes moves for computer


update(move) :

1. updates display
2. updates board
3. updates message display with [player] moves [row, cloumn]
3. calls isWin to test for a win and isTie for a tie to determine if game over


getMoveScore(move, board) :

1. runs through entire board and scores all rows, columns and two diagonals given the current move.  returned scores for each row, column and diagonal using following:

1. 100 :  if move would complete a row (winning)  (unit has two pieces)
2. 10  :  if move would leave one remaining empty spot (unit has one piece)
3. 1   :  if move would leave two remaining empty spots (unit is empty)
4. -100 :  if opposite piece has two with one empty
5. -10  :  if opposite piece has one with two rows empty
6. -1   :  if row is empty
7.  1000 : if any unit is already complete before move. a win has been scored


Therefore.

Empty units = 1
units with pieces from both sides = 0 (default)
units with one piece from current player = 10
units with two pieces from current player = 100

after scoring all winning units, calculate total and return.


aiPlayer() :
1. will iterate through all squares on board and run getMoveScore(move)  if square is empty.
2. keeps track of best score
3. run makeMove(move) using best score


perfectAiPlayer() :
same as above, but with the following modification:

min/max search algorithm:
1. computer iterates all squares scoring each position for itself (same as above)
  2. computer iterates all squares scoring each position for opponent
  3. Run this recursively for either 4 moves or until win/loss/tie (stopping condition)
4. need to track score sum all computer moves + enemy moves for start on each square tested
5. make move on square with highest total score.


KEY CONTROLS
=======================================================

reset/flip board button
change pieces button (resets game with new piece)
ai difficulty level toggle (solo, normal, hard)

When game starts for first time, a modal window drops down asking for piece selection.  It shows two a big X and O button.

Clicking on change pieces will bring up this window again.

this window might just be a general game setup window with ai difficulty toggle as well.
