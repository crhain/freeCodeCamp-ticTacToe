{"version":3,"sources":["src\\app\\model.js","src\\app\\Board.js","src\\app\\Control.js","src\\app\\Message.js","src\\app\\game.js","src\\app\\app.js"],"names":["model","board","boardRows","boardColumns","boardDiagonals","getBoard","getRows","getColumns","getDiagonals","makeCopyOfBoard","clearBoard","getBoardCell","setBoardCell","args","length","row","column","push","diagonalOne","diagonalTwo","i","j","copy","slice","move","piece","Board","game","buttons","document","querySelectorAll","self","addEventListener","e","square","update","preventDefault","messageWindows","getElementsByClassName","innerHTML","classList","remove","squareId","id","setSquare","getSquareById","message","messageId","toLowerCase","messageWindow","getElementById","contains","add","Control","resetButton","gameModeSelect","selectPieceBtns","reset","setGameMode","parseInt","target","value","selectXbutton","selectObutton","getGameOver","getTurn","getPlayerPiece","setPlayerPiece","Message","display","outputBuffer","messagePanel","classes","title","getElementsByTagName","buffer","updateOutputBuffer","updateDisplay","getOutputBuffer","splice","getDisplayWindow","getFormatedOutputText","output","boardDisplay","controlPanel","playerPiece","computerPiece","playerTurn","gameOver","turn","gameMode","start","determineGameState","makeMove","aiPlayerMove","getMoveScore","getScore","isMoveValid","isWin","isTie","createMoveFromSquare","createMoveFromCoords","getCurrentPiece","toggleCurrentPiece","incrementTurn","toggleGameOver","getIsPlayerTurn","togglePlayerTurn","getGameMode","console","log","send","showMessage","bestMove","score","JSON","parse","stringify","hasOwnProperty","perfectAiPlayerMove","testBoard","scores","totalScore","reduce","rowTotal","total","cell","subTotal","Math","abs","translateScoreToFinal","newScore","currentMove","squareMatches","currentMovePositionString","toString","zBoard","squareIDString","getAttribute","squareIDDelminiterPos","indexOf","Number","substring","mode"],"mappings":";;;;;;AAAA;;AAEA,IAAIA,QAAQ,EAAZ;AAAA,IACIC,QAAQ,CACN,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CADM,EAEN,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAFM,EAGN,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAHM,CADZ;AAAA,IAMIC,SANJ;AAAA,IAOIC,YAPJ;AAAA,IAQIC,cARJ;ACFA,ACAA;AFYA;AIZA,AJaAJ,ICXqB0B,ACAA2B,EFWfhD,QEVJ,AFUF,GAAiBA,QAAjB,MEVcsB,IAAZ,EAAiB;ADAjB,ACAiB,AFWnB3B,MAAMM,OAAN,GAAgBA,CCXFqB,IAAZ,EAAiB,ADWnB;ACXmB,AEHnB,AEAA,ALeA3B,MAAMO,UAAN,GAAmBA,UAAnB;AEZmB,AFanBP,MAAMQ,YAAN,GAAqBA,YAArB;ACZI,AGHJ,AJgBAR,IGfqBoE,EHef3D,GCbGkB,IAAL,GAAYA,IAAZ,CDaJ,GAAwBlB,eAAxB;ACZI,ACDA,ACDF,AHeFT,MAAMU,CEdGiB,CDCDC,GCDJ,GAAYD,EFchB,ECbkBE,ACDd,CFcenB,EGfJ,MFEYoB,EDa3B,cCbkB,CAA0B,eAA1B,CAAd;AACA,ACDA,ACFW,AHgBf9B,MAAMW,CEdG2C,WAAL,AFcJ,GEduBzB,AFcFlB,SEdWuC,GFchC,WEduB,CAAwB,WAAxB,CAAnB;ADEA,ACDA,AFcJlD,MAAMY,CEdG2C,CDCF,CAAC3B,OAAJ,EAAY,ADahB,GEdI,AFciBhB,GEdKiB,SAASqB,AFcnC,cEd0B,CAAwB,kBAAxB,CAAtB;ADCc,ACAd,ACHA,AEFJ,ADAA,OFKSM,ECHAa,OAAL,GAAexC,GDGf,GAAuBA,GCHCqB,MDGQZ,QCHjB,CAAwB,aDGhB,CAAgC,GCHxC,CAAf,cDGuB,CAAvB;ADAuB,ACCvB,ACHA,AEFJ,ALoBAtC,MAAMC,GGlBGqE,EHkBT,GAAcrE,KAAd,EGlBI,GAAoB,EAApB;AFGA,ACCA,ACHA,AEFJ,MHKO,CAAC,CCHAsE,IDGKjB,WAAT,ACHmBzB,EDGE,OCHOqB,cAAT,CAAwB,eAAxB,CAAnB;AFGA,ACCE,AGLN,ALoBA,QChBQnB,OAAO,IAAX;AACA,ACCC,ACHDwC,AEFJ,ADHA,AJuBA,SChBQ,ADgBClE,IChBGe,IAAI,AEFCY,AHkBjB,CChBI,EAAeZ,ADgBA,IChBIQ,QAAQd,CEF3B,CAA8B,IFE9B,EAAmCM,CEFnC,EFEA,AEFuC,EFEA,QEFCa,CAAD,EAAO;AFG5CL,ACCF,ACHE,AEFN,ALoBE,SAAO3B,CGlBCuE,IFEIpD,ADgBZ,CChBI,EAAWY,GEFGuC,aFEd,AEF2B/B,CFEC,OAA5B,CEFA,CFEqC,UAASP,CAAT,EAAW;AAC9C,ACCJ,ACHE,AHkBL,OEfQqB,GCHCmB,EFEEvC,MCCR,ACHcqC,CDGGvC,EDDA,IAAb,MEFuB0C,IDG3B,CAAkC,OAAlC,EAA2C,MCH7B,CAAkC,GDGJzC,CAAD,ACH7B,EDGoC,ACHI,CAAxC,CAAZ;AFGE,ACCF,ACHA,AHkBN,UEfWN,ACHF6C,IDGH,CAAUf,GCHCN,AEFF,EHKT,MCHG,CAAiB,MEFNwC,KAAL,GFEN,CAAH,EAAoC;AFGlC,ACCF1D,ACHEsC,AHkBR,MEfQnC,GFeC9B,OAAT,GAAyB,CEfnB,CCHekC,SAAb,CAAuBC,MAAvB,CAA8B,cAA9B;AFGAV,ACCH,ACHG0C,AEFR,ALmByB,GEjBrB,UDES9C,CEFCY,GFEN,CAAUJ,KEFV,CFEA,CAAiBD,CEFC,KFElB,KDeYrB,CGjBZ,GHiBiB;ACdjBoB,ACCJ,ACHG,ACTP,AJyBoBpB,OEbX0C,ACNH,CHmBmB,ECdfnB,GEDA,QDEN,CAAoBJ,EDDhB,cCCJ,CAAqC,QAArC,EAA+C,UAACC,CAAD,EAAO;ADAnD,ACCD,ACFEsC,AHciB,OCnBnB,cEKe/B,SAAb,CAAuBY,GAAvB,CAA2B,cAA3B;AFEH,ACCC,ACFEqB,ACVR,IAAI9C,MFYOA,CEZA,EAAX,CFYM,ACFQY,CDEEmB,QCFR,GDEF,ACFoB,CDEEC,SAAS1B,EAAE2B,MAAF,CAASC,CCFtC,IDEoB,CAAtB;ADAH,ACCG,ACFC,ACVP,AJuBE,MAAGhD,EEXI8C,MFWI9C,GEXKoB,EAAE2B,AFWF9C,MEXA,AFWL,CEXc+C,EFWA,CAAzB,EEXO,AFWoB,IEXO,CAA9B,EAAgC,CAE/B;AACD5B,ACJD,ACVL,AJuBM,IIvBFkD,CDDA,CDeI/C,KFSKvB,KIvBb,AJuBkB,CAAL,CItBTuE,AJsBE,EETA,UEdN,EAEInC,aAFJ;AFeK,ACJF,ACRH,AJqBG,GEhBC,CELAhD,uBAAJ;AFaM,ACJJ,ACRF,AJqBE,IIrBEoF,GFYM,EFSDpF,EETKmB,GFSZ,CETgB,CAAZ,EAAeA,AEZH,GAAlB,CFYyB,KAAKoC,eAAL,CAAqB1C,MAAxC,EAAgDM,GAAhD,EAAoD;AAClD,AEZR,AJqBC,IIrBGkE,KFYS9B,WEZO,GAApB,CFYQ,CAAqBpC,CAArB,EDNC,ACMuBY,gBAAxB,CAAyC,OAAzC,EAAkD,UAACC,CAAD,EAAO;ADL7D,ACMMA,AEZV,AJqBA,IIrBIsD,IFYQnD,EDNJR,OGNS,GHMCC,CGNlB,CFYU,ODNiBC,gBAAT,CAA0B,eAA1B,CAAd;AACA,ACMM,AEZV,AJqBA,IIrBI0D,KJqBKjF,CCfD8B,KGNO,IJqBf,CIrBA,EJqB4B,KCfHR,SAASS,sBAAT,CAAgC,WAAhC,CAArB;AACA,ACMM,AEZV,AJqBE,IIrBEmD,EJqBExF,KIrBK,AJqBT,CIrBF;AHOI,ACMM,UAAI6D,CDNN,IAAI1C,IAAI,CAAZ,EAAeA,GEFZ0B,CFEgBlB,ACMOC,QDNCf,AEFhB,CDQwBoC,KDNnC,EAAmC9B,GAAnC,EAAuC,ECMb,CAAwB,UAAxB,CAApB;ADLJQ,ACMI,ACRN,ACJJ,AJkB4B,UENdmC,ACRNY,MFEMvD,CAAR,EAAWmB,AEFA,KAAKqC,EDQQ/C,EDNxB,GAAuB,EAAvB,ECMiCqB,EFMhBrC,IAAK,CGdX,CAAwBiC,MDQX,CAAwB,ACRrC,CAAb,SDQ0B,CAApB;ADLL,ACMK,ACRN,AHamBjC,QAAK,EELfc,CCRJkD,IDQSb,SCRd,CAAmBW,CDQV,KCRT,CDQ+BhD,KAAKsC,OAAL,OAAmB,CAA5C,EAA8C;ADLpD,ACMQ,ACRT,ACJH,AJgB4B,IIhBxByB,QFYWzD,EAAE2B,CEZF,CAAf,EAAmB,EFYJ,CAASjB,EAAT,KAAgB,UAAnB,EAA8B;ADLtC,ACMU,WDNN,GCMShB,CDNLP,ICMU8C,CDNN,CAAZ,EAAe9C,KAAIiB,KCMN,OAA0B,GDNLvB,ACMxB,EAAiC,IDN3C,EAA0CM,IAA1C,EAA8C;AAC5CiB,ACMUV,AEZhB,AJgBE,MAAGd,QAAQA,GEJQsD,EFIHrD,ICVGM,EAAf,ADUO,ECVWoB,CDUG,CAAzB,EEJc,AFIa,CEJO,GAApB,CDNV,CAA4BC,MAA5B,CAAmC,MAAnC;AACD,ACMWR,AEZd,AJgBIhC,YAAQY,EEJI+C,GFIC,CAAL,CAAR,CEJU,CAASpB,OCVhB,EDUO,CAAmBY,GAAnB,CAAuB,WAAvB;ADLb,ACMaW,ACVZ,ACFJpC,AJgBG,GAFD,EIdGgE,IJiBH,CGfMhB,ACFR,GAAagB,AJiBRxF,KIjBL,CDEiB,KAAK2E,EDUQtC,GFKTrC,MELL,CAAwBsC,GCVvB,EAAb,CDUY,AFKkB3B,CELa,KFK1B,GAAsB,CAAzC,EELc,AFK6B;ACV3C,ACMa,ACVX6D,ACFJhD,AJiBM,KIjBDQ,MAAL,AJiBahC,EGfF4E,CCFG5C,KDEV,CAAc,ACFlB,CDEI,EAAiBwC,AHef,OGfsB7D,MAAxB;ADWS,ACVT,ACFJa,AJiBG,KIjBE8B,IFMO,CENZ,CDESoB,ECFIpB,EFaD,GEbZ,CFaexB,EAAE2B,GCXb,CAAmBe,EDWR,CAAShC,EAAT,CCXX,IDW2B,UAAnB,EAA8B;AAC5B,ACXX,AHeD,MAAIxC,QEJWwB,KAAKuC,EFID,EAAnB,UEJe,OAA0B,GAA7B,EAAiC;AAC/BvC,ACXd,ACAA,AJeA,OAAI,IAAIZ,MEJWoD,AFIL,CAAd,EAAiBpD,MAAMd,KEJT,CAAoB,AFILa,GEJf,GFId,EAAqCC,KAArC,EAA2C;AEH7BkB,AEXdN,AJeE,KIfG1B,IJeC,CIfN,GAAaA,AJeHe,CEJM4C,IEXhB,EFWc,CAASpB,CFIJ,CAAjB,EAAoBxB,ECdfQ,GCUO,CAAmB4B,EDVrB,CCUE,AFIiBnD,CEJM,KFIAc,GAAN,EAAWD,CEJ5B,KFIZ,EAAgDE,QAAhD,EAAyD;ACbzD,ACUY8C,AEXdnC,AJeI,KIfC0D,KHCC3C,ADcCvC,MIfP,GAAmBkF,EHCF7D,EDcGV,GCdE6B,ACUMH,EDV1B,CDcK,CIfP,EJe6BxB,GEJf,CAAwByB,KFIA,CEJxB,AFIV,CEJyC,CFIL,UEJ1B;ADTZ,ACUW,AEXbd,AJeMxB,KIfDoF,MHCE3C,IGDP,GAAkB2C,EHChB,CAAe,ADcEtE,IAAb,CCdgB4B,ADcE,EIfxB,AJeM,WCdW,CAAmBH,QAAnB,CAAf,EAA6ClB,KAAKC,KAAlD;AACD,ACUU,AEXXE,AJeK,KIfA6D,QAAL,GAAgBA,QAAhB,eDHmB1C,SAAQ;ADgBlB,ACfP,ACGFnB,AJeIxB,KIfCsF,IAAL,CDHMd,ECGMc,IAAZ,GDHe,AHkBEzE,KGlBG8D,CHkBhB,EAAqB7D,IAArB,CAA0BhB,MAAMc,CGlBrB,EAAb,AHkB4B,EAAWC,MAAX,CAA1B;AEAG,ACjBL2D,ACGFhD,AJeG,KE1BG,AEWD+D,QDHIzE,ACGT,GAAgByE,CDHd,CAAY5C,MCGd,CDHE;ADkBG,ACjBH,AHkBD,aGlBQ6B,MAAP,aFEU7B,SAAQ;AAClB,ACeD,ACjBA,ACGD,AJeA,SAAO3C,CChBD4C,WDgBN,CChBkBD,QAAQE,WAAR,EAAhB;AACA,AGCFrB,AJeD,KIfMiE,KHDC3C,aGCN,GHDsBpB,AGCI+D,SHDK1C,SGC/B,KHDsB,CAAwBH,SAAxB,CAApB;AACA,AGCFpB,AJeF,KIfOkE,KHDA,CAAC5C,EGCN,GAAgB4C,EFvCGxC,MEuCnB,CHDoBb,SAAd,CAAwBW,QAAxB,CAAiC,MAAjC,CAAJ,EAA6C;AAC3CF,AGCJtB,AJeF,KIfOmE,IJeEtF,QIfP,GAAoBsF,CJetB,CChBoBtD,EDgBU,OChBxB,CAAwBY,AGC5B,EDLcuB,CFIV,CAA4B,MAA5B,AEJiB;AFKlB,AEJD,ACKFhD,AJeE,KIfGoE,CJeC9F,IGpBAoE,CHoBJ,MIfF,GDLgB,ACKI0B,KDLCf,OCKrB,SDLgB,EAAd;AFKD,AEJCX,ACKF1C,KAAKqE,QAAL,CDLUzD,ECKMyD,ODLd,CCKF,EDLsB,KAAKf,qBAAL,CAA2BN,MAA3B,CAApB;AACD,AHiB2B,qCAAL9D,IAAK;AIX5Bc,AJWuBd,KIXlBoF,GJWuB,QIX5B,GAAmBA,WAAnB;AACAtE,AJU4B,KIVvBuE,KAAL,GAAaA,KAAb,gBHHcxD,UAAS;AACrB,AGGFf,KAAKwE,KAAL,GHHStE,AGGIsE,KAAb,IHHkBjD,cAAT,CAAwBR,KEJXiC,GFIb,CAAP,IEJ2B;AFK5B,AEJC,AHiBA,MAAG9D,IGjBCqE,IHiBOrE,KGjBE,AHiBGC,EGjBhB,IHiBW,GAAc,CAAzB,EAA2B;AGhB3B,ACOF,AJUMb,WGjBA,CHiBQY,GGjBJO,EHiBS,CAAL,CGjBAuD,AHiBR,OGjBe7D,MAAP,GAAgB,CAA5B,EAA+BM,KAAK,CAApC,EAAuCA,GAAvC,EAA2C;AACzC8D,ACOJvD,AJUG,GAFD,EIRGyE,IJWH,IAAGhG,KGlBS,OCOd,CDPsBuE,ECOMyB,GJWLhG,EGlBMgB,CAAP,CAAR,GAAoB,MAA9B,EHkBkCN,EIXtC,IJWuB,GAAwB,CAA7C,EAA+C;AGjB9C,ACOHa,AJWM,KIXD0E,MJWQjG,cIXb,AJWM,GIXsBiG,EHLlBnE,QAAQT,OAAM,GGKxB;AHJES,AEFA,AHkBC,aChBMK,AEFA2C,MAAP,GFEA,GAAmBzD,KAAnB;AACD,AEFA,ACQH,AJUI,MAAIrB,iBAAiB,EAArB;AGjBF,ACQFuB,AJUI,KIVCuC,CJUGhD,aIVR,CJUsB,EIVAgD,AJUlB,cIVJ;AACAvC,AJUI,KIVCwC,CJUGhD,aIVR,CJUsB,EIVAgD,AJUlB,cIVJ;AACAxC,AJUI,KIVC2E,EJUG,IAAIlF,IAAI,CAAR,EAAWC,EIVnB,EJUuB,CIVAiF,AJUnB,EAAsBlF,IAAInB,MAAMa,GIVpC,GJUI,EAAwCM,KAAKC,GAA7C,EAAiD;AITrDM,AJUMT,KIVDqF,WJUatF,IAAZ,CAAiBhB,EIVvB,GAA0BsG,CJUGnF,CAAN,EAASA,CAAT,CAAjB,YIVN;AACAO,AJUMR,KIVD8C,OAAL,GAAeA,CJUGhD,IAAZ,CAAiBhB,CIVvB,KJU6BmB,CAAN,EAASC,CAAT,CAAjB,MGrBa;AACf,ACWJM,AJUK,KIVA6E,QDXM,KFhDU9E,AEgDL4C,ACWhB,GAAqBkC,SDXjB,ICWJ;ADVG,ACWH7E,AJUIvB,KIVC4D,WAAL,CJUmB/C,EIVA+C,EJUf,CAAoB9C,QIVxB,GJUI;AITJS,AJUIvB,KIVCqG,YJUcxF,EIVnB,EJUI,CIVkBwF,AJUEtF,WAApB,GIVJ;AACAQ,KAAK+E,eAAL,GAAuBA,eAAvB;AACA/E,AJUI,KIVCgF,IJUMvG,YIVX,EJUI,CIVoBuG,eDbJ,CCapB;ADZI,ACaJhF,AJUC,KIVIiF,QDbM,GCaX,EDbgBvC,CCaGuC,MDbf,KCaJ;ADZG,ACaHjF,AJUA,KIVK+B,WAAL,GAAmBA,WAAnB;ADZE,AHuBF,SAASjD,eAAT,GAA0B;AGtBxB,ACcF,AJSE,MAAIa,OAAO,EAAX;AGtBA,ACcF,AJSE,OAAI,EITGqE,EJSC5E,GITV,GAAgB,AJSA,CAAd,EAAiBA,MAAMd,MAAMa,MAA7B,EAAqCC,KAArC,EAA2C;AIR3CoE,AJSE7D,SAAKL,IAAL,CAAUhB,GITG,GJSGc,GAAN,EAAWQ,KAAX,EAAV,KITuB,IAAV,CAAf;AACA6D,AJSC,iBITc,sBAAY,IAAZ,CAAf;AACAnC,AJSA,SAAO3B,IAAP,KITgB,uBAAhB;AACD,AJSA;AIRD,AJSA;AIRA,AJSA,SITSmC,AJSA/C,KITT,GAAgB,EJShB,GAAqB;AIRnBT,AJSA,MAAIA,EITES,MJSML,IGrFO+D,AC4EnB,MJSA;AIRAe,AJSA,OAAI,IAAIpE,IITK0C,EJSC,CAAd,EITA,AJSiB1C,MAAMd,MAAMa,MAA7B,EAAqCC,KAArC,EAA2C;AIR3CkC,AJSE,SAAI,IAAIjC,GITIyC,KAAd,CJSmB,CAAjB,EAAoBzC,SAASf,MAAMc,GAAN,EAAWD,MAAxC,EAAgDE,QAAhD,EAAyD;AIR3DuE,AJSItF,YAAMc,GITG,AJST,EAAWC,EITf,IJSI,IAAqB,EAArB;AIRJwE,AJSG,aITQ,KAAX;AACAC,AJSC,SITM,CAAP;AACD,AJSA;AIRD,AJSA;AIRA,AJSA,SITStD,AJSAxB,MITT,CAAgBuB,KJShB,CITA,AJSsBnB,EITC,CJSvB,EAA2BC,MAA3B,EAAkC;AIRhC,AJSA,MAAGA,SAAS,CAAT,IAAcD,MAAM,CAAvB,EAAyB;AIRzB,AJSE,MITEyE,KJSK,KAAP,CITaxB,aAAf;AACA,AJSC,GAFD,GIPI0B,GJSG,IAAI1E,IITI4F,KJSK,CA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","file":"app.f156ab4b.map","sourcesContent":["//Model that holds game state\r\n\r\nvar model = {},\r\n    board = [ \r\n      ['', '', ''], \r\n      ['', '', ''], \r\n      ['', '', ''] \r\n    ],\r\n    boardRows,\r\n    boardColumns,\r\n    boardDiagonals;\r\n\r\n//public methods    \r\nmodel.getBoard = getBoard;\r\nmodel.getRows = getRows;\r\nmodel.getColumns = getColumns;\r\nmodel.getDiagonals = getDiagonals;\r\nmodel.makeCopyOfBoard = makeCopyOfBoard;\r\nmodel.clearBoard = clearBoard;\r\nmodel.getBoardCell = getBoardCell;\r\nmodel.setBoardCell = setBoardCell;    \r\n\r\n\r\nmodel.board = board;\r\n\r\n//method: getBoard()\r\nfunction getBoard(){\r\n  return board;\r\n}\r\n//method: getRows([board: array])\r\nfunction getRows(...args){\r\n  if(args && args.length > 0){\r\n      return args[0];\r\n  }  \r\n  return board;    \r\n}\r\n//method: getColumns([board: array])\r\nfunction getColumns(...args){\r\n  var board;\r\n  if(args && args.length > 0){\r\n      board = args[0];\r\n  }else          \r\n  if(boardColumns && boardColumns.length > 0){\r\n      return boardColumns;\r\n  }\r\n  var boardColumns = [];\r\n  for(let row = 0; row < board.length; row++){\r\n    for(let column = 0; column < board[row].length; column++){\r\n      if(boardColumns.length < column + 1){\r\n        boardColumns.push([]);\r\n      }                 \r\n      boardColumns[column].push(board[row][column]);\r\n    }      \r\n  }\r\n  return boardColumns;    \r\n}\r\n//method: getDiagonals([board: array])\r\nfunction getDiagonals(...args){\r\n    var board;      \r\n    if(args && args.length > 0){\r\n        board = args[0]\r\n    }else\r\n    if(boardDiagonals && boardDiagonals.length > 0){\r\n        return boardDiagonals; \r\n    }\r\n    var boardDiagonals = [];\r\n    var diagonalOne = [];\r\n    var diagonalTwo = [];\r\n    for(let i = 0, j = 2; i < board.length; i++, j--){\r\n      diagonalOne.push(board[i][i]);\r\n      diagonalTwo.push(board[i][j])        \r\n    }\r\n    boardDiagonals.push(diagonalOne);\r\n    boardDiagonals.push(diagonalTwo);\r\n    \r\n    return boardDiagonals;       \r\n}\r\n//method: makeCopyOfBoard()\r\nfunction makeCopyOfBoard(){    \r\n  var copy = [];    \r\n  for(let row = 0; row < board.length; row++){      \r\n    copy.push(board[row].slice());\r\n  }\r\n  return copy;        \r\n}\r\n//method: clearBoard()\r\nfunction clearBoard(){\r\n  var board = getBoard();\r\n  for(let row = 0; row < board.length; row++){\r\n    for(let column = 0; column < board[row].length; column++){\r\n      board[row][column] = '';\r\n    }\r\n  }\r\n}\r\n//method: getBoardCell(row: int, column: int)\r\nfunction getBoardCell(row, column){\r\n  if(column < 1 || row < 1){\r\n    return false;\r\n  } else if (column > 3 || row > 3){\r\n    return false;\r\n  }\r\n  var board = getBoard();\r\n  return board[row-1][column-1];\r\n}\r\n//method: setBoardCell(move: object)\r\nfunction setBoardCell(move){\r\n  //console.log('setting board cell for move:');\r\n  //console.log(move);\r\n  var board = getBoard();\r\n  var row = move.row,\r\n      column = move.column,\r\n      piece = move.piece;\r\n  if(column < 1 || row < 1){\r\n    return false;\r\n  } else if (column > 3 || row > 3){\r\n    return false;\r\n  }\r\n  board[row-1][column-1] = piece;\r\n  //console.log('set board cell for move:');\r\n  //console.log(getBoard());\r\n  return true;\r\n}\r\n  \r\n\r\nexport default model;","/*handles display of board, board input*/\r\n\r\nexport default class Board {\r\n  constructor(game){\r\n    this.game = game;\r\n    var buttons = document.querySelectorAll('#board button');\r\n    //short circuit for tests\r\n    if(!buttons){ return; }\r\n    //add click handler to buttons\r\n    var self = this;\r\n    for(let i = 0; i < buttons.length; i++){\r\n      buttons[i].addEventListener('click', function(e){\r\n        var square = this;\r\n        //console.log('button clicked!');\r\n        //call game update\r\n        self.game.update(square);\r\n        e.preventDefault();\r\n      });\r\n    }\r\n  }\r\n  reset(){\r\n    var buttons = document.querySelectorAll('#board button');\r\n    var messageWindows = document.getElementsByClassName('game-over');\r\n    //clear text on buttons\r\n    for(let i = 0; i < buttons.length; i++){\r\n      buttons[i].innerHTML = '';\r\n    }\r\n    //close any open game-over status messageWindows\r\n    for(let i = 0; i < messageWindows.length; i++){\r\n      messageWindows[i].classList.remove('show');\r\n    }\r\n  }\r\n  //updates the board display - called from game module\r\n  update(move){\r\n    let squareId = move.id;\r\n    this.setSquare(this.getSquareById(squareId), move.piece);    \r\n  }\r\n  showMessage(message){\r\n    var messageId = message.toLowerCase();    \r\n    let messageWindow = document.getElementById(messageId);\r\n    if(!messageWindow.classList.contains('show')){\r\n      messageWindow.classList.add('show');      \r\n    }\r\n  }  \r\n  getSquareById(squareId){\r\n    return document.getElementById(squareId);\r\n  }\r\n  setSquare(square, piece){\r\n    square.innerHTML = piece;\r\n  }\r\n}\r\n\r\n","/*Handles input from and display of control panel*/\r\n\r\nexport default class Control {\r\n  constructor(game){\r\n    this.game = game;\r\n    this.resetButton = document.getElementById('reset-btn');\r\n    this.gameModeSelect = document.getElementById('game-mode-select');\r\n    this.selectPieceBtns = document.getElementsByClassName('select-piece-btn');        \r\n    //added for when running tests so that an error is not thrown\r\n    if(!this.resetButton){\r\n      return;\r\n    }\r\n    //set up even listener\r\n    this.resetButton.addEventListener('click', (e) => {      \r\n      this.game.reset();\r\n      e.preventDefault();\r\n    });\r\n    this.gameModeSelect.addEventListener('change', (e) => {\r\n      //console.log(e);      \r\n      this.game.setGameMode(parseInt(e.target.value));\r\n      if(parseInt(e.target.value) > 0){\r\n\r\n      }\r\n      e.preventDefault();\r\n    });\r\n      for(let i = 0; i < this.selectPieceBtns.length; i++){\r\n        this.selectPieceBtns[i].addEventListener('click', (e) => {\r\n          e.preventDefault();\r\n          //console.log('clicked a piece selection!');\r\n          //console.log(e);\r\n          var selectXbutton = document.getElementById('select-x');\r\n          var selectObutton = document.getElementById('select-o');\r\n          if(game.getGameOver() || game.getTurn() === 1){\r\n            if(e.target.id === 'select-x'){\r\n              if(game.getPlayerPiece() !== 'X'){\r\n                game.setPlayerPiece('X');\r\n                e.target.classList.add('is-active');\r\n                selectObutton.classList.remove('is-active');\r\n              }            \r\n            }else\r\n            if(e.target.id === 'select-o'){\r\n              if(game.getPlayerPiece() !== 'O'){\r\n                game.setPlayerPiece('O');\r\n                e.target.classList.add('is-active');\r\n                selectXbutton.classList.remove('is-active');\r\n              }            \r\n            }  \r\n\r\n          }     \r\n          \r\n          \r\n        });\r\n      }                 \r\n  }\r\n}\r\n","/*A very simple terminal emulator using html*/\r\n\r\nexport default class Message{\r\n  constructor(){\r\n    this.display = document.getElementById('message-display');\r\n    this.outputBuffer = [];\r\n    var messagePanel = document.getElementById('message-panel');\r\n\r\n    messagePanel.addEventListener('click', (e) => {\r\n      let classes = messagePanel.classList;\r\n      let title = messagePanel.getElementsByTagName('h3')[0];      \r\n      if(classes.contains('is-rolled-up')){\r\n        messagePanel.classList.remove('is-rolled-up');\r\n        title.innerHTML = \"Messages:\";\r\n      }\r\n      else{\r\n        messagePanel.classList.add('is-rolled-up');\r\n        title.innerHTML = \"Click To Show More\";        \r\n      }\r\n    });\r\n  }\r\n  //public methods\r\n  send(message){\r\n    var buffer = this.updateOutputBuffer(message);\r\n    this.updateDisplay(buffer);\r\n  }\r\n  reset(){\r\n    var buffer = this.getOutputBuffer();\r\n    buffer.splice(0, buffer.length);\r\n    this.updateDisplay(buffer);\r\n  }\r\n  //private methods\r\n  updateOutputBuffer(message){\r\n    var buffer = this.getOutputBuffer();\r\n    buffer.push(message);\r\n    return buffer;\r\n  }\r\n  updateDisplay(buffer){\r\n    var display = this.getDisplayWindow()\r\n    display.innerHTML = this.getFormatedOutputText(buffer);\r\n  }\r\n  getFormatedOutputText(buffer){\r\n    var output = '';\r\n    for(let i = buffer.length - 1; i >= 0; i--){\r\n      output += '<p>' + buffer[i] + '</p>';\r\n    }\r\n    return output;\r\n  }\r\n  //getter methods for class properties\r\n  getOutputBuffer(){\r\n    return this.outputBuffer;\r\n  }\r\n  getDisplayWindow(){\r\n    return this.display;\r\n  }\r\n  //getLineLimit(){\r\n  //  return this.lineLimit;\r\n  //}\r\n}\r\n","import model from \"./model.js\";\r\nimport Board from \"./Board.js\";\r\nimport Control from \"./Control.js\";\r\nimport Message from \"./Message.js\";\r\n\r\n/*Handles all game logic and coordination between game interface elements*/\r\n\r\nvar game = {};\r\n//PRIVATE PROPERTIES\r\nvar boardDisplay,\r\n    controlPanel,\r\n    messageWindow;\r\nvar board = model;\r\nvar playerPiece = 'X';\r\nvar computerPiece = 'O';\r\nvar playerTurn = true;\r\nvar gameOver = false;\r\nvar turn = 1;\r\n\r\n//GAME TOGGLES\r\n\r\nvar gameMode = 1;  //0 = solo play; 1 = ai on\r\n\r\n//PUBLIC METHODS\r\n  //add public methods and properties to game\r\ngame.start = start;\r\ngame.update = update;\r\ngame.reset = reset;\r\n\r\n\r\n\r\n  //add private properties to game (for testing)\r\n  game.board = board;\r\n  game.playerPiece = playerPiece;\r\n  game.playerTurn = playerTurn;\r\n  game.gameOver = gameOver;\r\n  game.turn = turn;\r\n  game.gameMode = gameMode;    \r\n\r\n  //add private methods to game (for testing)\r\n  game.determineGameState = determineGameState;\r\n  game.makeMove = makeMove;\r\n  game.aiPlayerMove = aiPlayerMove;\r\n  game.getMoveScore = getMoveScore;\r\n  game.getScore = getScore;\r\n\r\n  game.isMoveValid = isMoveValid;\r\n  game.isWin = isWin;\r\n  game.isTie = isTie;\r\n\r\n  //game.getCurrentMoveOnBoard = getCurrentMoveOnBoard;\r\n  game.createMoveFromSquare = createMoveFromSquare;\r\n  game.createMoveFromCoords = createMoveFromCoords;\r\n\r\n\r\n//add getters and setters to game (public?)  \r\ngame.getPlayerPiece = getPlayerPiece;\r\ngame.setPlayerPiece = setPlayerPiece;        \r\ngame.getCurrentPiece = getCurrentPiece;\r\ngame.toggleCurrentPiece = toggleCurrentPiece;\r\ngame.getTurn = getTurn;\r\ngame.incrementTurn = incrementTurn;\r\ngame.getGameOver = getGameOver;\r\ngame.toggleGameOver = toggleGameOver;\r\ngame.getIsPlayerTurn = getIsPlayerTurn;\r\ngame.togglePlayerTurn = togglePlayerTurn;\r\ngame.getGameMode = getGameMode;\r\ngame.setGameMode = setGameMode;\r\n\r\n\r\n//initializes all game objects and starts the ball rolling\r\nfunction start(){\r\n  boardDisplay = new Board(this);\r\n  controlPanel = new Control(this);\r\n  messageWindow = new Message();\r\n}\r\n//resets the game display and state\r\nfunction reset(){\r\n  board.clearBoard();\r\n  boardDisplay.reset();\r\n  messageWindow.reset();\r\n  playerTurn = true;\r\n  gameOver = false;\r\n  turn = 1;\r\n}\r\n//updates game state for each move\r\nfunction update(square){\r\n  //if game is over, then restart game on click\r\n  var gameOver = getGameOver();\r\n  var gameMode = getGameMode();\r\n\r\n  if(gameOver){\r\n    reset();\r\n    return false;\r\n  }\r\n  \r\n  if(getIsPlayerTurn() || gameMode === 0){\r\n    var move = createMoveFromSquare(square);\r\n    //attempt to make move and if it fails, send messasge\r\n    if(!makeMove(move)){\r\n      console.log('Cannot move there!'); //update to send to message window\r\n      messageWindow.send('Cannot move there!');\r\n      return false;\r\n    }\r\n    determineGameState(move);\r\n    \r\n  }\r\n\r\n  if(!gameOver) {\r\n      if(gameMode > 0) { aiPlayerMove(); }\r\n      return true;\r\n  }\r\n      \r\n  return false;\r\n}\r\n\r\n//***************************************************************************/\r\n//PRIVATE METHODS\r\n//***************************************************************************/\r\n\r\n//METHOD: determineGameState(move: object)\r\nfunction determineGameState(move){\r\n  //send move to message-panel\r\n  messageWindow.send(move.piece + \": moves \" + move.row + \", \" + move.column);\r\n  //test for win\r\n  if(isWin(move)){\r\n    if(playerTurn){\r\n      console.log('You have WON!!!'); //update to send to message window\r\n      messageWindow.send('You have WON!!!');\r\n      boardDisplay.showMessage('win');\r\n    }\r\n    else{\r\n      console.log('You have LOST :(((('); //update to send to message window\r\n      messageWindow.send('You have LOST :((((');\r\n      boardDisplay.showMessage('loss');\r\n    }\r\n    gameOver = true;\r\n    //resetGame();\r\n  }\r\n  else if(isTie(move)){\r\n    console.log('You have tied :|'); //update to send to message window\r\n    messageWindow.send('You have tied :|');\r\n    boardDisplay.showMessage('tie');\r\n    gameOver = true;\r\n  }\r\n  else{\r\n    //switch to other oponents move\r\n    playerTurn = !playerTurn;\r\n    //next turn\r\n    turn++;\r\n  }\r\n}\r\n//METHOD: makeMove(move: object)\r\nfunction makeMove(move){\r\n  if(isMoveValid(move)){\r\n    //update board model\r\n    board.setBoardCell(move);\r\n    //update display\r\n    boardDisplay.update(move);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n//****************************************************\r\n//MORE PRIVATE METHODS: Game AI and logic\r\n//****************************************************\r\n\r\n//METHOD: aiPlayerMove() - simple heuristic scoring alogrithim (i.e. getMoveScore)\r\nfunction aiPlayerMove(){    \r\n  var bestMove = {},\r\n      move = {},\r\n      score = 0;\r\n  bestMove.score = 0;\r\n  move.score = 0;\r\n  \r\n  //go through every square on board\r\n  for(let row = 0; row < 3; row++){\r\n    for(let column = 0; column < 3; column++){\r\n      move = createMoveFromCoords(row+1, column+1);\r\n      move.score = 0;             \r\n      if(isMoveValid(move)){\r\n        move.score = getMoveScore(move);               \r\n        if(move.score >= bestMove.score){\r\n          bestMove = JSON.parse(JSON.stringify(move)); //hack to copy one object to another\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if(!bestMove.hasOwnProperty('row')){\r\n    bestMove = JSON.parse(JSON.stringify(move));\r\n    console.log('error! no best move!');\r\n  } \r\n  //make move\r\n  if(makeMove(bestMove)){ determineGameState(bestMove); }    \r\n  //makeMove(bestMove);\r\n  //determineGameState(bestMove);\r\n}\r\n\r\n//METHOD: perfectAiPlayerMove() - uses min/max search algorithim and heuristic scoring\r\nfunction perfectAiPlayerMove(){\r\n\r\n}\r\n\r\n//METHOD: getMoveScore(move: object, [board: array])\r\nfunction getMoveScore(move, ...args){    \r\n  //move score:\r\n  //  score each unit (columns, rows, diagonals) with regards to potential move\r\n  //   +100 = computer: unit that will have three in a row\r\n  //   +10  = computer: unit that will have two in a row with one empty\r\n  //   +1   = computer: unit that will have one with two empty    \r\n  //   -100  = player:   unit has two in a row with one empty\r\n  //   -10   = player:   unit that will have one in a row\r\n  //    -1   = empty unit\r\n\r\n  //use supplied board or create copy of board\r\n  let testBoard;\r\n  if(args && args.length > 0){\r\n    testBoard = args[0];\r\n  }\r\n  else{\r\n    testBoard = board.makeCopyOfBoard();\r\n  }        \r\n  //2. create container for each scored unit (3 rows, 3 columns, and 2 diagonals) and totalScore    \r\n  let scores = [];\r\n  let totalScore = 0;    \r\n  //3. place computer test move\r\n  testBoard[move.row-1][move.column-1] = move.piece;\r\n  //4. sum up scores for all columns, rows, and diagonals\r\n  totalScore += getScore( board.getRows(testBoard) );\r\n  totalScore += getScore( board.getColumns(testBoard) );\r\n  totalScore += getScore( board.getDiagonals(testBoard) );\r\n  \r\n  return totalScore;                     \r\n}\r\n//METHOD: getScore(board: array)\r\nfunction getScore(board){  \r\n    let score = 0;\r\n    score = board.reduce(((value, row) => {             \r\n      let rowTotal = row.reduce(((total, cell) => {\r\n        if(cell === computerPiece){ \r\n          return total < 0 ? -100 : total += 1;        \r\n        }else\r\n        if(cell === playerPiece){ \r\n          return total > 0 ? 100 : total -= 1; \r\n        }else\r\n        if(cell === '') { \r\n          return total += 0;\r\n        }      \r\n      }), 0);\r\n      let subTotal = 0; \r\n      if(Math.abs(rowTotal) > 3){\r\n        subTotal = value + 0;\r\n      }else{\r\n        subTotal = value + translateScoreToFinal(rowTotal);\r\n      }\r\n      return subTotal;        \r\n      //return Math.abs(subTotal) > 3 ? value += 0 : value += subTotal;\r\n        \r\n    }), 0);\r\n    //UTILITY FUNCTION: translateScoreToFinal(score: int)\r\n    function translateScoreToFinal(score){\r\n      var newScore = 0;\r\n      if(score === 0){ \r\n        newScore = score; \r\n      } else \r\n      if(score < 0){ \r\n        newScore = -(10 ** (Math.abs(score) - 1) ); \r\n      } else {\r\n        newScore = 10 ** (Math.abs(score) - 1);\r\n      }        \r\n      return newScore;\r\n    }\r\n    //return final score from getScore(board: array)\r\n    return score;\r\n}      \r\n\r\nfunction isMoveValid(move){\r\n  if(board.getBoardCell(move.row, move.column) !== '' || gameOver){\r\n    return false;\r\n  }\r\n  //console.log('My square value is:' + board.getBoardCell(move.row, move.column));\r\n  return true;\r\n}\r\n\r\nfunction isWin(currentMove){\r\n  //compare current board to various win conditions (8 possible)\r\n  var column = 1;\r\n  var row = 1;\r\n  var squareMatches = 0;\r\n  //first we check if all squares in row are = to piece\r\n  var currentMovePositionString = currentMove.row.toString() + ',' + currentMove.column.toString();\r\n  for(column = 1; column <= 3; column++){\r\n    //console.log('matching row:' + currentMove.row + ' , column:' + column);\r\n    //console.log('board piece is:' + board.getBoardCell(currentMove.row, column));\r\n    if(board.getBoardCell(currentMove.row, column) === currentMove.piece){\r\n      //console.log('piece matched!');\r\n      squareMatches++;\r\n    }\r\n  }\r\n  if(squareMatches === 3){\r\n    return true;\r\n  }\r\n  else{\r\n    squareMatches = 0;\r\n  }\r\n  //next we check to see if all squares in column = to piece\r\n  for(row = 1; row <=3; row++){\r\n    if(board.getBoardCell(row, currentMove.column) === currentMove.piece){\r\n      squareMatches++;\r\n    }\r\n  }\r\n  if(squareMatches === 3){\r\n    return true;\r\n  }\r\n  else{\r\n    squareMatches = 0;\r\n  }\r\n  //now finally we check the diagonals!\r\n  //top left corner\r\n  if(currentMovePositionString === '1,1'){\r\n    if(board.getBoardCell(2, 2) === currentMove.piece && board.getBoardCell(3, 3) === currentMove.piece){\r\n      return true;\r\n    }\r\n  //top right corner\r\n  }else if(currentMovePositionString === '1,3'){\r\n    if(board.getBoardCell(2, 2) === currentMove.piece && board.getBoardCell(3, 1) === currentMove.piece){\r\n      return true;\r\n    }\r\n  // center, so need to check both diagonals\r\n  }else if(currentMovePositionString === '2,2'){\r\n    if(board.getBoardCell(1, 1) === currentMove.piece && board.getBoardCell(3, 3) === currentMove.piece){\r\n      return true;\r\n    }\r\n    if(board.getBoardCell(1, 3) === currentMove.piece && board.getBoardCell(3, 1) === currentMove.piece){\r\n      return true;\r\n    }\r\n  //bottom left corner\r\n  }else if(currentMovePositionString === '3,1'){\r\n    if(board.getBoardCell(2, 2) === currentMove.piece && board.getBoardCell(1, 3) === currentMove.piece){\r\n      return true;\r\n    }\r\n  //bottom right corner\r\n  }else if(currentMovePositionString === '3,3'){\r\n    if(board.getBoardCell(2, 2) === currentMove.piece && board.getBoardCell(1, 1) === currentMove.piece){\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isTie(currentMove){\r\n  var zBoard = board.getBoard();\r\n  for(let row = 0; row < zBoard.length; row++){\r\n    for(let column = 0; column < zBoard[row].length; column++){\r\n      if(zBoard[row][column] === ''){\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction createMoveFromSquare(square){\r\n  var squareIDString = square.getAttribute('id');\r\n  var squareIDDelminiterPos = squareIDString.indexOf('x');\r\n  var row = Number.parseInt(squareIDString.substring(0, squareIDDelminiterPos)),\r\n      column = Number.parseInt(squareIDString.substring(squareIDDelminiterPos + 1));\r\n  var move = {\r\n              id: squareIDString,\r\n              row: row,\r\n              column: column,\r\n              piece: getCurrentPiece(),\r\n            };\r\n  return move;\r\n}\r\n\r\nfunction createMoveFromCoords(row, column, piece = computerPiece){\r\n  var id = row + 'x' + column;\r\n  return {id: id, row: row, column: column, piece: piece}\r\n}\r\n\r\n//***********************************************\r\n//GETTERS AND SETTERS AND OTHER UTILITY METHODS\r\n//***********************************************\r\n\r\n\r\n\r\nfunction getCurrentPiece(){\r\n  var piece = playerTurn ? playerPiece : computerPiece;\r\n  return piece;\r\n}\r\n//STUB\r\nfunction getPlayerPiece(){\r\n  return playerPiece;\r\n}\r\n\r\nfunction setPlayerPiece(piece){    \r\n  playerPiece = piece;\r\n  computerPiece = piece === 'X' ? 'O' : 'X';\r\n}\r\n\r\nfunction toggleCurrentPiece(){\r\n\r\n}\r\n\r\nfunction getTurn(){\r\n  return turn;\r\n}\r\n\r\nfunction incrementTurn(){\r\n  turn++;\r\n}\r\n\r\nfunction getGameOver(){\r\n  return gameOver;\r\n}\r\n\r\nfunction toggleGameOver(){\r\n  gameOver = !gameOver;\r\n}\r\n\r\nfunction getIsPlayerTurn(){\r\n  return playerTurn;\r\n}\r\n\r\nfunction togglePlayerTurn(){\r\n  playerTurn = !playerTurn;\r\n}\r\n\r\nfunction getGameMode(){    \r\n  return gameMode;\r\n}\r\n\r\nfunction setGameMode(mode){    \r\n  gameMode = mode;\r\n}\r\n\r\nexport default game;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import game from \"./game.js\";\r\n\r\n// if(game){\r\n//     console.log(\"Let's play some Tic Tac Toe!\");\r\n//     game.start();\r\n// } else {\r\n//     console.log(\"Game not running :(\");\r\n// }\r\n\r\nexport default game.start();\r\n\r\n// export const run = game;\r\n"]}